from datetime import datetime


class Bl:
    def __init__(self):
        self.events = []

    def add_bl(self, event, start_time, end_time):
        try:
            start_time = start_time.replace(".", ":")
            end_time = end_time.replace(".", ":")

            # Add leading zeros if day or month are not two digits
            start_time = datetime.strptime(start_time, "%d-%m-%Y %H:%M")
            end_time = datetime.strptime(end_time, "%d-%m-%Y %H:%M")

            # Check if start time is before end time
            if start_time >= end_time:
                return "End time must be after start time. Please try again."

            # Add event to the list
            self.events.append({"EventName": event, "StartTime": start_time, "EndTime": end_time})
            return f"Added event '{event}' from {start_time} to {end_time}."
        except ValueError:
            return "Invalid date format. Please try again."

    def show_bl(self, events):
        events_with_duration = map(self.calculate_duration, events)  # Use the passed events list
        event_iter = iter(events_with_duration)  # Create iterator for map

        for event in self.events:
            duration = next(event_iter)
            event["Duration"] = duration  # Update duration in each event


    def calculate_duration(self, event):
        duration_seconds = (event["EndTime"] - event["StartTime"]).total_seconds() # find second

        # Convert Hours to Min
        hours = int(duration_seconds // 3600)
        minutes = int((duration_seconds % 3600) // 60)

        return f"{hours}:{minutes:02d} hours"


    def remove_bl(self, which_remove):
        try:
            if 1 <= which_remove <= len(self.events):
                removed_event = self.events.pop(which_remove - 1)
                return f"Removed event: {removed_event['EventName']}"
            else:
                return "Invalid selection. Please try again."
        except ValueError:
            return "Invalid input. Please enter a valid number."

    def check_empty(self,username,password):
        try:
            if username == "" or password == "":
                raise ValueError
        except ValueError:
            return (">> Please enter your username and password.")
        return ""


    def bl_check_password(self, password, password2):
        try:
            if password != password2:
                raise ValueError(">> Passwords don't match. Please try again.")
        except ValueError as e:
            return str(e)
        return ""


class Ui:
    def __init__(self, bl):
        self.bl = bl
        self.userData = []
        self.events = []
        self.timestamp = datetime.now()


    def main(self):
        print("========================================")
        print("Welcome to our Planner App : ")
        print("1.Register")
        print("2.Login")
        print("3.Exit")
        option1 = input("Choose which you want to go ['1','2','3'] : ")
        if option1 == "1":
            self.register()
        elif option1 == "2":
            self.login()
        elif option1 == "3":
            self.exit()
        else:
            print(">> Invalid input. Please try again.")
            self.main()

    def register(self):
        print("-------------[Register]-------------")
        username = str(input("Input your username : "))
        password = str(input("Input your password : "))
        password2 = str(input("Confirm your password : "))


        # Check input empty
        empty_error = self.bl.check_empty(username, password)
        if "Please enter your username and password." in empty_error:
            print(empty_error)
            self.main()

        # Check if passwords match
        password_error = self.bl.bl_check_password(password, password2)
        if password_error:
            print(password_error)
            self.main()

        self.userData.append({username: password}) # Store user data
        print("You have successfully registered!")
        self.login()





    def login(self):
        print("-------------[Login]-------------")
        username = str(input("Input your username : "))
        password = str(input("Input your password : "))

        self.checklogin(username, password)
        print("[You have successfully logged in]")


    def checklogin(self, username, password):
        for i in self.userData:
            if username in i and i[username] == password:
                print("----------------------------------------------")
                print(f"Welcome {username}!! to our Planner App")
                self.PlannerApp()
                return
        print(" >> Login failed")
        self.main()

    def PlannerApp(self):
        print("----------------------------------------------")
        print("Choose what you want to do !!")
        print("1.Add Event & Time")
        print("2.Show Event")
        print("3.Remove Event")
        print("4.Log out")
        print("------------------------------------")
        option2 = input("Choose which you want to go [1] [2] [3] [4] : ")
        if option2 == "1":
            self.add()
        elif option2 == "2":
            self.show()
        elif option2 == "3":
            self.remove()
        elif option2 == "4":
            self.logout()
        else:
            print(">> Invalid input. Please try again.")
            self.PlannerApp()

    def add(self):
        print("-------------[Add Event]-------------")
        print('>> If you want to exit, type "Exit" ')
        event = str(input("Enter the event name : "))
        if event.lower() == "exit":
            print(">> Exit Add Event")
            self.PlannerApp()
        start_time = str(input("Enter start time [In format DD-MM-YYYY HH:MM ] : "))
        if start_time.lower() == "exit":
            print(">> Exit Add Event")
            self.PlannerApp()
        end_time = str(input("Enter end time [In format DD-MM-YYYY HH:MM ] : "))
        if end_time.lower() == "exit":
            print(">> Exit Add Event")
            self.PlannerApp()

        resultText = self.bl.add_bl(event, start_time, end_time) # Add

        if "Added event" not in resultText:
            self.add()  # Retry if the event was not added

        print(f"You have entered the event: '{event}' from {start_time} to {end_time}")
        self.PlannerApp()

    def show(self):
        if not self.bl.events:
            print("No events available.")
        else:
            self.bl.show_bl(self.bl.events)
            for event in self.bl.events:
                print(
                    f"Event: {event['EventName']} | Start: {event['StartTime']} | End: {event['EndTime']} | Duration: {event['Duration']}")
        self.PlannerApp()


    def remove(self):
        if not self.bl.events:
            print("No events available to remove.")
        else:
            for idx, i in enumerate(self.bl.events, start=1):
                print(f"{idx}. {i['EventName']}")

            try:
                which_remove = int(input("Which event to remove? (Enter number): "))
                result = self.bl.remove_bl(which_remove)
                print(result)
            except ValueError:
                print("Invalid input. Please enter a valid number.")

        self.PlannerApp()

    def exit(self):
        choice = str(input("Are you sure you want to exit? (y,n) : "))

        if choice.lower() == "y" or choice.lower() == "yes":
            print("------------------------------------")
            print("Thank you for using our Planner App!!")
            print("------------------------------------")
            exit()
        elif choice.lower() == "n" or choice.lower() == "no":
            self.main()
        else:
            print(">> Invalid input. Please enter only (y,n).")
            self.exit()

    def logout(self):
        self.main()


def main():
    bl_inst = Bl()
    ui = Ui(bl_inst)
    ui.main()


if __name__ == "__main__":
    main()
